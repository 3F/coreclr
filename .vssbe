{
  "Header": {
    "_": [
      " This file for vsSolutionBuildEvent ",
      " https://github.com/3F/vsSolutionBuildEvent "
    ],
    "Compatibility": "0.12.4"
  },
  "PreBuild": [
    {
      "Enabled": true,
      "Name": "Def",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "$(coreclrDir = 'src\\coreclr\\\\')",
          "$(buildscript = 'build-runtime.cmd')",
          "$(fver = 'eng\\native\\version\\_version.h')",
          "$(rver = 'eng\\native\\version\\runtime_version.h')",
          "$(coreclrBin = 'artifacts\\bin\\coreclr\\\\')",
          "",
          "#[$(pkgpDir = 'artifacts/pkg/$(Configuration)/')]",
          "#[$(objDir = 'artifacts/obj/')]",
          "",
          "$(pkgILAsmDir = \"$(pkgpDir)ILAsm/\")",
          "",
          "$(revDeltaBase  = \"2016/10/12\")",
          "$(revDeltaMin   = $([System.Math]::Pow(10, 3)))",
          "$(revDeltaMax   = 65535)",
          "",
          "#[try",
          "{",
          "    #[IO delete.directory(\"$(pkgpDir)\", true)]",
          "}catch{ F-53, SobaScript }]",
          "",
          "#[IO copy.directory(\"\", \"$(pkgpDir)\", true)]",
          "",
          "#[var pVer = #[File get(\".version\")]]",
          "#[var pModVer = #[File get(\".modversion\")]]",
          "",
          "Fix possible newlines when committing through GitHub web editor",
          "https://github.com/3F/7z.Libs/commit/67c83ced",
          "$(pVer = $(pVer.Trim()))",
          "$(pReleaseVersion = $(pReleaseVersion.Trim()))",
          "",
          "make sure",
          "#[IO copy.directory(\"\", \"$(objDir)\", true)]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "Compile",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[var tBase     = $([System.DateTime]::Parse('$(revDeltaBase)').ToBinary())]",
          "#[var tNow      = $([System.DateTime]::UtcNow.Ticks)]",
          "#[var revBuild  = #[$(",
          "    [System.TimeSpan]::FromTicks('$(",
          "        [MSBuild]::Subtract($(tNow), $(tBase))",
          "    )')",
          "    .TotalMinutes.ToString('0')",
          ")]]",
          "",
          "#[var revBuild  = #[$(",
          "     [MSBuild]::Add(",
          "         $(revDeltaMin), ",
          "         $([MSBuild]::Modulo(",
          "             $(revBuild), ",
          "             $([MSBuild]::Subtract(",
          "                 $(revDeltaMax), $(revDeltaMin)",
          "              ))",
          "          ))",
          "      )  ",
          ")]]",
          "",
          "#[$(pkgVersion = \"$(pVer.Split('.')[0]).$(pModVer)\")]",
          "#[$(pProductVersion = \"$(pkgVersion)\")]",
          "",
          "#[var _versionH = #[File get(\"$(fver)\")]]",
          "#[var _runtimeH = #[File get(\"$(rver)\")]]",
          "",
          "#[var isGit = #[IO cmd(\"git rev-parse 2>&1\")]]",
          "#[( $(isGit) == \"\" )",
          "{",
          "    #[var bSha1 = #[IO sout(\"git\", \"rev-parse --short HEAD\")]]",
          "    #[var bName = #[IO sout(\"git\", \"rev-parse --abbrev-ref HEAD\")]]",
          "    #[var bRevc = #[IO sout(\"git\", \"rev-list HEAD --count\")]]",
          "",
          "    #[($(bName) == \"HEAD\") {",
          "        #[var bName = $(APPVEYOR_REPO_BRANCH)]",
          "    }]",
          "",
          "    #[$(pProductVersionPrint = \"$(pProductVersion)+$(bSha1.Substring(0, 7))\")]",
          "}",
          "else {",
          "    #[$(bSha1 = '-')] #[$(bName = '-')] #[$(bRevc = '0')]",
          "",
          "    #[$(pProductVersionPrint = $(pProductVersion))]",
          "}]",
          "",
          "",
          "_version.h",
          "",
          "#[$(vMajor = $(pVer.Split('.')[0]))]",
          "",
          "#[var _versionH = #[$(_versionH.Replace('00.00.00.00000', \"$(vMajor).$(pModVer).$(revBuild)\")",
          "                               .Replace('00,00,00,00000', \"$(vMajor),$(pModVer.Replace('.', ',')),$(revBuild)\")",
          "                               .Replace('0.0.0', \"$(vMajor).$(pModVer)\") )]]",
          "",
          "",
          "#[$(Regex = '$([System.Text.RegularExpressions.Regex]::Replace')]",
          "",
          "#[var _versionH = #[#[$(Regex)]('$(_versionH)', '(VER_3FMOD_BSHA1_STR\\s*)\"\"', '$1\"$(bSha1)\"'))]]",
          "#[var _versionH = #[#[$(Regex)]('$(_versionH)', '(VER_3FMOD_BNAME_STR\\s*)\"\"', '$1\"$(bName)\"'))]]",
          "#[var _versionH = #[#[$(Regex)]('$(_versionH)', '(VER_3FMOD_BREV\\s*)0', '$1 $(bRevc)'))]]",
          "#[var _versionH = #[#[$(Regex)]('$(_versionH)', '(VER_3FMOD_PRODUCT_STR\\s*)\"\"', '$1\"$(pProductVersionPrint)\"'))]]",
          "",
          "#[File write(\"$(objDir)_version.h\"):#[$(_versionH)]]",
          "",
          "",
          "runtime_version.h",
          "",
          "#[$(vMinor = $(pModVer.Split('.')[0]))]",
          "#[$(vPatch = $(pModVer.Split('.')[1]))]",
          "",
          "#[var _runtimeH = ",
          "    #[$(_runtimeH.Replace('RuntimeAssemblyMajorVersion 0', \"RuntimeAssemblyMajorVersion $(vMajor)\")",
          "       .Replace('RuntimeAssemblyMinorVersion 0', \"RuntimeAssemblyMinorVersion $(vMinor)\")",
          "       .Replace('RuntimeFileMajorVersion 0', \"RuntimeFileMajorVersion $(vMajor)\")",
          "       .Replace('RuntimeFileMinorVersion 0', \"RuntimeFileMinorVersion $(vMinor)\")",
          "       .Replace('RuntimeFileBuildVersion 0', \"RuntimeFileBuildVersion $(vPatch)\")",
          "       .Replace('RuntimeFileRevisionVersion 0', \"RuntimeFileRevisionVersion $(revBuild)\")",
          "       .Replace('RuntimeProductMajorVersion 0', \"RuntimeProductMajorVersion $(vMajor)\")",
          "       .Replace('RuntimeProductMinorVersion 0', \"RuntimeProductMinorVersion $(vMinor)\")",
          "       .Replace('RuntimeProductPatchVersion 0', \"RuntimeProductPatchVersion $(vPatch)\")",
          "       .Replace('RuntimeProductVersion 0.0.0-dev', \"RuntimeProductVersion $(vMajor).$(vMinor).$(vPatch)-dev\") )]]",
          "",
          "#[File write(\"$(objDir)runtime_version.h\"):#[$(_runtimeH)]]",
          "",
          "#[IO call(\"$(coreclrDir)$(buildscript)\", \"$(args)\", 0)]"
        ]
      }
    }
  ],
  "PostBuild": [
    {
      "Enabled": false,
      "Name": "NupkgILAsm",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "",
          "#[$(odir = \"$(pkgpDir)$(zipArch)/\")]",
          "#[$(zipDir = \"$(coreclrBin)windows.$(zipArch).$(Configuration)\\\\\")]",
          "",
          "",
          "#[var buildInfo = $([System.String]::Concat(\"  \"))",
          "    #[$(pProductVersionPrint)]",
          "    ",
          "    ( #[$(pModVer)] based on #[$(pVer)] ) https://github.com/3F/coreclr",
          "    ",
          "    Configuration:  #[$(Configuration)]",
          "    ",
          "    Architecture:   #[$(zipArch)]",
          "    ",
          "    Build number:   #[$(revBuild)]",
          "    ",
          "    ",
          "    :: generated by a vsSolutionBuildEvent #[$(vsSolutionBuildEvent)]",
          "]",
          "",
          "#[( #[IO exists.file(\"$(zipDir)ilasm.exe\")] )",
          "{",
          "",
          "    #[try{ #[IO delete.directory(\"$(odir)\", true)] } catch{ }]",
          "    #[IO copy.directory(\"\", \"$(odir)\", true)]",
          "    ",
          "    #[IO writeLine(\"$(zipDir)build.info.txt\"):#[var buildInfo]]",
          "    #[IO copy.file({\".tools/hMSBuild.bat\"}, \"$(zipDir)\", true)]",
          "    ",
          "    #[IO copy.directory(\"\", \"$(pkgILAsmDir)bin\", true)]",
          "    #[IO copy.file",
          "    ({",
          "        \"$(zipDir)ilasm.exe\",",
          "        \"$(zipDir)ildasm.exe\",",
          "        \"$(zipDir)build.info.txt\",",
          "        \"LICENSE.TXT\",",
          "        \"PATENTS.TXT\",",
          "        \"THIRD-PARTY-NOTICES.TXT\",",
          "        \".version\",",
          "        \".modversion\",",
          "        \".tools/hMSBuild.bat\"",
          "    }, ",
          "    \"$(pkgILAsmDir)bin/Win.$(zipArch)\", true)]",
          "",
          "    #[( \"$(Configuration)\" == \"Release\" && \"$(disablePkgZipArchives)\" != true )",
          "    {",
          "        #[7z pack.directory",
          "        (",
          "            \"$([System.IO.Path]::GetFullPath('$(SolutionDir)$(zipDir)'))\",",
          "            \"$(odir)coreclr.$(pProductVersionPrint).Win.$(zipArch).7z\",",
          "            SevenZip, Lzma2, #[$(pkgZipCompressionLevel)]",
          "        )]",
          "    }]",
          "}]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "Pack",
      "Caption": "pack ILAsm ...",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "",
          "#[IO copy.directory(\"\", \"$(pkgILAsmDir)tools\", true)]",
          "#[IO copy.file",
          "({",
          "    \".tools/*.bat\",",
          "    \".tools/*.cmd\"",
          "}, ",
          "\"$(pkgILAsmDir)tools\", true)]",
          "",
          "",
          "#[IO copy.file",
          "({",
          "    \".tools/ILAsm.nuspec\",",
          "    \".tools/.gitattributes\",",
          "    \"LICENSE.TXT\",",
          "    \"changelog.txt\",",
          "    \"README.md\",",
          "    \".version\",",
          "    \".modversion\"",
          "}, ",
          "\"$(pkgILAsmDir)\", true)]",
          "",
          "#[IO replace(\"$(pkgILAsmDir)ILAsm.nuspec\", \"%Version%\", \"$(pkgVersion)\")]",
          "",
          "",
          "#[\" https://github.com/3F/DllExport/issues/36 \"]",
          "#[IO copy.directory(\"\", \"$(pkgILAsmDir)lib/net/\", true)]",
          "#[IO write(\"$(pkgILAsmDir)lib/net/_._\"):]",
          "",
          "#[IO copy.directory(\"\", \"$(pkgILAsmDir)lib/netcoreapp/\", true)]",
          "#[IO write(\"$(pkgILAsmDir)lib/netcoreapp/_._\"):]",
          "",
          "#[IO copy.directory(\"\", \"$(pkgILAsmDir)lib/netstandard/\", true)]",
          "#[IO write(\"$(pkgILAsmDir)lib/netstandard/_._\"):]",
          "",
          "#[\" -  - \"]",
          "",
          "#[IO copy.directory(\"\", \"$(pkgILAsmDir)build\\native\", true)]",
          "#[IO copy.file(\".tools\\ILAsm.native.targets\", \"$(pkgILAsmDir)build\\native/ILAsm.targets\", true)]",
          "",
          "#[IO copy.directory(\"\", \"$(pkgILAsmDir)build\\net\", true)]",
          "#[IO copy.file(\".tools\\ILAsm.net.targets\", \"$(pkgILAsmDir)build\\net/ILAsm.targets\", true)]",
          "",
          "#[IO copy.directory(\"\", \"$(pkgILAsmDir)build\\netcoreapp\", true)]",
          "#[IO copy.file(\".tools\\ILAsm.net.targets\", \"$(pkgILAsmDir)build\\netcoreapp/ILAsm.targets\", true)]",
          "",
          "#[IO copy.directory(\"\", \"$(pkgILAsmDir)build\\netstandard\", true)]",
          "#[IO copy.file(\".tools\\ILAsm.net.targets\", \"$(pkgILAsmDir)build\\netstandard/ILAsm.targets\", true)]",
          "",
          "",
          "#[IO replace(\"$(pkgILAsmDir)ILAsm.nuspec\", \"%VersionFull%\", \"$(pProductVersionPrint) ( $(pModVer) based on $(pVer) )\")]",
          "",
          "#[(\"$(pkgZipCompressionLevel)\"==\"*Undefined*\") { #[$(pkgZipCompressionLevel = 5)] }]",
          "",
          "#[$(zipArch = 'x64')] #[Core events.Post.item(\"NupkgILAsm\").run()]",
          "",
          "#[$(zipArch = 'x86')] #[Core events.Post.item(\"NupkgILAsm\").run()]",
          "",
          "",
          "",
          "#[NuGet gnt.raw(\"/t:pack /p:ngin=$(pkgILAsmDir) /p:ngout=$(pkgpDir)\")]",
          ""
        ]
      }
    }
  ]
}